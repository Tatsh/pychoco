jobs:
  build:
    runs-on: 'windows-latest'
    steps:
      - uses: 'actions/checkout@v5'
      - name: 'Set up Python'
        run: |
          winget install --accept-package-agreements --accept-source-agreements --disable-interactivity --id Python.Python.3.13 --exact --silent --source winget
          pipx install yq
      - name: 'Install Poetry'
        run: curl -sSL https://install.python-poetry.org | python -
        shell: bash
      - name: 'Install dependencies (Poetry)'
        run: |
          "${APPDATA}/Python/Scripts/poetry" install
          "${APPDATA}/Python/Scripts/poetry" run pip install pyinstaller yq
        shell: 'bash'
      - name: 'Build with PyInstaller'
        run: |
          vers=$(echo "$(tomlq -r '.project.version|split(".")|map(tonumber)|@csv' pyproject.toml),0")
          version=$(tomlq -r .project.version pyproject.toml)
          project_name=$(tomlq -r '.project.urls.repository|split("/")[-1]' pyproject.toml)
          while IFS=$' ' read -r script_name python_path func_name; do
            func_name="${func_name#"${func_name%%[![:space:]]*}"}"
            func_name="${func_name%"${func_name##*[![:space:]]}"}"
            cat > temp_script.py <<EOF
          from ${python_path} import ${func_name}
          if __name__ == '__main__':
              ${func_name}()
          EOF
            cat temp_script.py
            cat > version-info.txt <<EOF
          VSVersionInfo(
              ffi=FixedFileInfo(filevers=(${vers}),
                                prodvers=(${vers}),
                                mask=0x3f,
                                flags=0x0,
                                OS=0x4,
                                fileType=0x1,
                                subtype=0x0,
                                date=(0, 0)),
              kids=[
                  StringFileInfo([
                      StringTable(u'040904B0', [
                          StringStruct(u'CompanyName', u'Tatsh'),
                          StringStruct(
                              u'FileDescription',
                              u'${script_name} from ${project_name}. - ${{github.server_url}}/${{github.repository}}'
                          ),
                          StringStruct(u'FileVersion', u'${version}'),
                          StringStruct(u'InternalName', u'${script_name}.exe'),
                          StringStruct(u'LegalCopyright', u'Copyright (c) ${project_name} authors.'),
                          StringStruct(u'OriginalFilename', u'${script_name}.exe'),
                          StringStruct(u'ProductName', u'${project_name}'),
                          StringStruct(u'ProductVersion', u'${version}')
                      ])
                  ]),
                  VarFileInfo([VarStruct(u'Translation', [0x409, 1200, 0x809, 1252])])
              ])
          EOF
            cat version-info.txt
            "${APPDATA}/Python/Scripts/poetry" run pyinstaller --onefile -n "${script_name}" \
              --hidden-import colorlog -y --version-file version-info.txt temp_script.py
            cat "${script_name}.spec"
          done < <(tomlq -r '.project.scripts|to_entries[]|"\(.key) \(.value|split(":")|join(" "))"' pyproject.toml)
        shell: 'bash'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pyinstaller-binaries'
          path: |
            dist/*.exe
name: 'PyInstaller'
'on':
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'master'
permissions:
  contents: 'read'
